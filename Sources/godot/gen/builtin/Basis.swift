/// autogenerated

import godot_native

fileprivate var __godot_name_Basis: StringName! = nil

/// 3×3 matrix datatype.
/// 
/// 3×3 matrix used for 3D rotation and scale. Almost always used as an orthogonal basis for a [Transform3D].
///  
/// Contains 3 vector fields X, Y and Z as its columns, which are typically interpreted as the local basis vectors of a transformation. For such use, it is composed of a scaling and a rotation matrix, in that order (M = R.S).
///  
/// Can also be accessed as array of 3D vectors. These vectors are normally orthogonal to each other, but are not necessarily normalized (due to scaling).
///  
/// For more information, read the "Matrices and transforms" documentation article.
public class Basis : BuiltinClass {

    public static var interface: UnsafePointer<GDExtensionInterface>! = nil
    public static var library: GDExtensionClassLibraryPtr! = nil
    
    var interface: UnsafePointer<GDExtensionInterface> { Self.interface }

    

    public class var __godot_name: StringName { __godot_name_Basis }

    public static let SIZE = 72;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _constructor_4: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class(_ ginit: GodotInitializer, _: GDExtensionInitializationLevel) {
        Self.interface = ginit.p_interface
        Self.library = ginit.p_library

        // Init constructors before assigning __godot_name
        Basis._constructor_0 =  Basis.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_BASIS, 0)
        assert(Basis._constructor_0 != nil)
        Basis._constructor_1 =  Basis.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_BASIS, 1)
        assert(Basis._constructor_1 != nil)
        Basis._constructor_2 =  Basis.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_BASIS, 2)
        assert(Basis._constructor_2 != nil)
        Basis._constructor_3 =  Basis.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_BASIS, 3)
        assert(Basis._constructor_3 != nil)
        Basis._constructor_4 =  Basis.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_BASIS, 4)
        assert(Basis._constructor_4 != nil)
    }

    public class func initialize_godot_name() {
        // At this point constructors for String and StringName
        // must be assigned
        __godot_name_Basis = StringName(from: "Basis")
    }

    /// Constructs a default-initialized [Basis] set to [constant IDENTITY].
    public init() {
        self.opaque = .allocate(byteCount: 72, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Basis] as a copy of the given [Basis].
    public init(from: Basis) {
        self.opaque = .allocate(byteCount: 72, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a pure rotation basis matrix, rotated around the given [param axis] by [param angle] (in radians). The axis must be a normalized vector.
    public init(from: Quaternion) {
        self.opaque = .allocate(byteCount: 72, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a pure rotation basis matrix from the given quaternion.
    public init(axis: Vector3, angle: Float64) {
        self.opaque = .allocate(byteCount: 72, alignment: 4)
        withUnsafePointer(to: angle) { angle_native in
        let axis_native = axis._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(axis_native), .init(angle_native)
            ])
            // call here
            Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
        }
    }
    /// Constructs a basis matrix from 3 axis vectors (matrix columns).
    public init(x_axis: Vector3, y_axis: Vector3, z_axis: Vector3) {
        self.opaque = .allocate(byteCount: 72, alignment: 4)
        let z_axis_native = z_axis._native_ptr()
        let y_axis_native = y_axis._native_ptr()
        let x_axis_native = x_axis._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 3)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(x_axis_native), .init(y_axis_native), .init(z_axis_native)
            ])
            // call here
            Self._constructor_4!(self._native_ptr(), .init(args.baseAddress!))
    }
    public required init(godot unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(godot unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}