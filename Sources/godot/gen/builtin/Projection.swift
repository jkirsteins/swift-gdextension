/// autogenerated

import godot_native

fileprivate var __godot_name_Projection: StringName! = nil

/// 3D projection (4x4 matrix).
/// 
/// A 4x4 matrix used for 3D projective transformations. It can represent transformations such as translation, rotation, scaling, shearing, and perspective division. It consists of four [Vector4] columns.
///  
/// For purely linear transformations (translation, rotation, and scale), it is recommended to use [Transform3D], as it is more performant and has a lower memory footprint.
///  
/// Used internally as [Camera3D]'s projection matrix.
public class Projection : BuiltinClass {

    public static var interface: UnsafePointer<GDExtensionInterface>! = nil
    public static var library: GDExtensionClassLibraryPtr! = nil
    
    var interface: UnsafePointer<GDExtensionInterface> { Self.interface }

    public enum Planes : Int32 {
        case PLANE_NEAR = 0
        case PLANE_FAR = 1
        case PLANE_LEFT = 2
        case PLANE_TOP = 3
        case PLANE_RIGHT = 4
        case PLANE_BOTTOM = 5
    }

    public class var __godot_name: StringName { __godot_name_Projection }

    public static let SIZE = 128;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class(_ ginit: GodotInitializer, _: GDExtensionInitializationLevel) {
        Self.interface = ginit.p_interface
        Self.library = ginit.p_library

        // Init constructors before assigning __godot_name
        Projection._constructor_0 =  Projection.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PROJECTION, 0)
        assert(Projection._constructor_0 != nil)
        Projection._constructor_1 =  Projection.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PROJECTION, 1)
        assert(Projection._constructor_1 != nil)
        Projection._constructor_2 =  Projection.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PROJECTION, 2)
        assert(Projection._constructor_2 != nil)
        Projection._constructor_3 =  Projection.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PROJECTION, 3)
        assert(Projection._constructor_3 != nil)
    }

    public class func initialize_godot_name() {
        // At this point constructors for String and StringName
        // must be assigned
        __godot_name_Projection = StringName(from: "Projection")
    }

    /// Constructs a default-initialized [Projection] set to [constant IDENTITY].
    public init() {
        self.opaque = .allocate(byteCount: 128, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Projection] as a copy of the given [Projection].
    public init(from: Projection) {
        self.opaque = .allocate(byteCount: 128, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a Projection as a copy of the given [Transform3D].
    public init(from: Transform3D) {
        self.opaque = .allocate(byteCount: 128, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a Projection from four [Vector4] values (matrix columns).
    public init(x_axis: Vector4, y_axis: Vector4, z_axis: Vector4, w_axis: Vector4) {
        self.opaque = .allocate(byteCount: 128, alignment: 4)
        let w_axis_native = w_axis._native_ptr()
        let z_axis_native = z_axis._native_ptr()
        let y_axis_native = y_axis._native_ptr()
        let x_axis_native = x_axis._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 4)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(x_axis_native), .init(y_axis_native), .init(z_axis_native), .init(w_axis_native)
            ])
            // call here
            Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
    }
    public required init(godot unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(godot unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}