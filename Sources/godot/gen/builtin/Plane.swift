/// autogenerated

import godot_native

fileprivate var __godot_name_Plane: StringName! = nil

/// Plane in hessian form.
/// 
/// Plane represents a normalized plane equation. Basically, "normal" is the normal of the plane (a,b,c normalized), and "d" is the distance from the origin to the plane (in the direction of "normal"). "Over" or "Above" the plane is considered the side of the plane towards where the normal is pointing.
public class Plane : BuiltinClass {

    

    public class var __godot_name: StringName { __godot_name_Plane }

    public static let SIZE = 32;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _constructor_4: GDExtensionPtrConstructor? = nil
    static var _constructor_5: GDExtensionPtrConstructor? = nil
    static var _constructor_6: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class() {
        // Init constructors before assigning __godot_name
        Plane._constructor_0 =  Plane.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PLANE, 0)
        assert(Plane._constructor_0 != nil)
        Plane._constructor_1 =  Plane.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PLANE, 1)
        assert(Plane._constructor_1 != nil)
        Plane._constructor_2 =  Plane.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PLANE, 2)
        assert(Plane._constructor_2 != nil)
        Plane._constructor_3 =  Plane.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PLANE, 3)
        assert(Plane._constructor_3 != nil)
        Plane._constructor_4 =  Plane.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PLANE, 4)
        assert(Plane._constructor_4 != nil)
        Plane._constructor_5 =  Plane.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PLANE, 5)
        assert(Plane._constructor_5 != nil)
        Plane._constructor_6 =  Plane.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_PLANE, 6)
        assert(Plane._constructor_6 != nil)
        Plane._destructor =  Plane.interface.pointee.variant_get_ptr_destructor(GDEXTENSION_VARIANT_TYPE_PLANE)
        assert(Plane._destructor != nil)

        // At this point constructors must be assigned
        __godot_name_Plane = StringName(from: "Plane")
    }

    /// Constructs a default-initialized [Plane] with all components set to [code]0[/code].
    public init() {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Plane] as a copy of the given [Plane].
    public init(from: Plane) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Creates a plane from the four parameters. The three components of the resulting plane's [member normal] are [param a], [param b] and [param c], and the plane has a distance of [param d] from the origin.
    public init(normal: Vector3) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let normal_native = normal._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(normal_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Creates a plane from the normal vector. The plane will intersect the origin.
    ///  
    /// The [param normal] of the plane must be a unit vector.
    public init(normal: Vector3, d: Float64) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        withUnsafePointer(to: d) { d_native in
        let normal_native = normal._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(normal_native), .init(d_native)
            ])
            // call here
            Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
        }
    }
    /// Creates a plane from the normal vector and the plane's distance from the origin.
    ///  
    /// The [param normal] of the plane must be a unit vector.
    public init(normal: Vector3, point: Vector3) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let point_native = point._native_ptr()
        let normal_native = normal._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(normal_native), .init(point_native)
            ])
            // call here
            Self._constructor_4!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Creates a plane from the normal vector and a point on the plane.
    ///  
    /// The [param normal] of the plane must be a unit vector.
    public init(point1: Vector3, point2: Vector3, point3: Vector3) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let point3_native = point3._native_ptr()
        let point2_native = point2._native_ptr()
        let point1_native = point1._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 3)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(point1_native), .init(point2_native), .init(point3_native)
            ])
            // call here
            Self._constructor_5!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Creates a plane from the three points, given in clockwise order.
    public init(a: Float64, b: Float64, c: Float64, d: Float64) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        withUnsafePointer(to: d) { d_native in
        withUnsafePointer(to: c) { c_native in
        withUnsafePointer(to: b) { b_native in
        withUnsafePointer(to: a) { a_native in
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 4)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(a_native), .init(b_native), .init(c_native), .init(d_native)
            ])
            // call here
            Self._constructor_6!(self._native_ptr(), .init(args.baseAddress!))
        }
        }
        }
        }
    }
    public required init(from unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(from unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}