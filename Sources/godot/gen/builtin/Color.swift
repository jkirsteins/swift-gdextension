/// autogenerated

import godot_native

fileprivate var __godot_name_Color: StringName! = nil

/// Color built-in type, in RGBA format.
/// 
/// A color represented in RGBA format by red ([member r]), green ([member g]), blue ([member b]), and alpha ([member a]) components. Each component is a 16-bit floating-point value, usually ranging from 0 to 1. Some properties (such as [member CanvasItem.modulate]) may support values greater than 1, for overbright or High Dynamic Range colors. If you want to supply values in a range of 0 to 255, you should use [method @GDScript.Color8].
///  
/// Colors can also be created by name from a set of standardized colors, through the [String] constructor, [method from_string], or by directly fetching the color constants documented here. The standardized color set is based on the [url=https://en.wikipedia.org/wiki/X11_color_names]X11 color names[/url], with the addition of [constant TRANSPARENT].
///  
/// [b]Note:[/b] In a boolean context, a Color will evaluate to [code]false[/code] if it's equal to [code]Color(0, 0, 0, 1)[/code] (opaque black). Otherwise, a Color will always evaluate to [code]true[/code].
///  
/// [url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/color_constants.png]Color constants cheatsheet[/url]
public class Color : BuiltinClass {

    

    public class var __godot_name: StringName { __godot_name_Color }

    public static let SIZE = 16;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _constructor_4: GDExtensionPtrConstructor? = nil
    static var _constructor_5: GDExtensionPtrConstructor? = nil
    static var _constructor_6: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class() {
        // Init constructors before assigning __godot_name
        Color._constructor_0 =  Color.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_COLOR, 0)
        assert(Color._constructor_0 != nil)
        Color._constructor_1 =  Color.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_COLOR, 1)
        assert(Color._constructor_1 != nil)
        Color._constructor_2 =  Color.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_COLOR, 2)
        assert(Color._constructor_2 != nil)
        Color._constructor_3 =  Color.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_COLOR, 3)
        assert(Color._constructor_3 != nil)
        Color._constructor_4 =  Color.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_COLOR, 4)
        assert(Color._constructor_4 != nil)
        Color._constructor_5 =  Color.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_COLOR, 5)
        assert(Color._constructor_5 != nil)
        Color._constructor_6 =  Color.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_COLOR, 6)
        assert(Color._constructor_6 != nil)
        Color._destructor =  Color.interface.pointee.variant_get_ptr_destructor(GDEXTENSION_VARIANT_TYPE_COLOR)
        assert(Color._destructor != nil)

        // At this point constructors must be assigned
        __godot_name_Color = StringName(from: "Color")
    }

    /// Constructs a default [Color] from opaque black. This is the same as [constant BLACK].
    ///  
    /// [b]Note:[/b] in C#, constructs an empty color with all of its components set to [code]0.0[/code] (transparent black).
    public init() {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Color] from the existing color, with [member a] set to the given [param alpha] value.
    ///  
    /// [codeblocks]
    ///  
    /// [gdscript]
    ///  
    /// var red = Color(Color.RED, 0.2) # 20% opaque red.
    ///  
    /// [/gdscript]
    ///  
    /// [csharp]
    ///  
    /// var red = new Color(Colors.Red, 0.2f); // 20% opaque red.
    ///  
    /// [/csharp]
    ///  
    /// [/codeblocks]
    public init(from: Color) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Color] as a copy of the given [Color].
    public init(from: Color, alpha: Float64) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        withUnsafePointer(to: alpha) { alpha_native in
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native), .init(alpha_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
        }
    }
    /// Constructs a [Color] either from an HTML color code or from a standardized color name. The supported color names are the same as the constants.
    public init(r: Float64, g: Float64, b: Float64) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        withUnsafePointer(to: b) { b_native in
        withUnsafePointer(to: g) { g_native in
        withUnsafePointer(to: r) { r_native in
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 3)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(r_native), .init(g_native), .init(b_native)
            ])
            // call here
            Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
        }
        }
        }
    }
    /// Constructs a [Color] either from an HTML color code or from a standardized color name, with [param alpha] on the range of 0.0 to 1.0. The supported color names are the same as the constants.
    public init(r: Float64, g: Float64, b: Float64, a: Float64) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        withUnsafePointer(to: a) { a_native in
        withUnsafePointer(to: b) { b_native in
        withUnsafePointer(to: g) { g_native in
        withUnsafePointer(to: r) { r_native in
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 4)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(r_native), .init(g_native), .init(b_native), .init(a_native)
            ])
            // call here
            Self._constructor_4!(self._native_ptr(), .init(args.baseAddress!))
        }
        }
        }
        }
    }
    /// Constructs a [Color] from RGB values, typically between 0.0 and 1.0. [member a] is set to 1.0.
    ///  
    /// [codeblocks]
    ///  
    /// [gdscript]
    ///  
    /// var color = Color(0.2, 1.0, 0.7) # Similar to `Color8(51, 255, 178, 255)`
    ///  
    /// [/gdscript]
    ///  
    /// [csharp]
    ///  
    /// var color = new Color(0.2f, 1.0f, 0.7f); // Similar to `Color.Color8(51, 255, 178, 255)`
    ///  
    /// [/csharp]
    ///  
    /// [/codeblocks]
    public init(code: String) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        withUnsafePointer(to: code) { code_native in
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(code_native)
            ])
            // call here
            Self._constructor_5!(self._native_ptr(), .init(args.baseAddress!))
        }
    }
    /// Constructs a [Color] from RGBA values, typically between 0.0 and 1.0.
    ///  
    /// [codeblocks]
    ///  
    /// [gdscript]
    ///  
    /// var color = Color(0.2, 1.0, 0.7, 0.8) # Similar to `Color8(51, 255, 178, 204)`
    ///  
    /// [/gdscript]
    ///  
    /// [csharp]
    ///  
    /// var color = new Color(0.2f, 1.0f, 0.7f, 0.8f); // Similar to `Color.Color8(51, 255, 178, 255, 204)`
    ///  
    /// [/csharp]
    ///  
    /// [/codeblocks]
    public init(code: String, alpha: Float64) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        withUnsafePointer(to: alpha) { alpha_native in
        withUnsafePointer(to: code) { code_native in
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(code_native), .init(alpha_native)
            ])
            // call here
            Self._constructor_6!(self._native_ptr(), .init(args.baseAddress!))
        }
        }
    }
    public required init(from unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(from unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}