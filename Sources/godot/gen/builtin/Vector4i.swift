/// autogenerated

import godot_native

fileprivate var __godot_name_Vector4i: StringName! = nil

/// Vector used for 4D math using integer coordinates.
/// 
/// 4-element structure that can be used to represent 4D grid coordinates or sets of integers.
///  
/// It uses integer coordinates and is therefore preferable to [Vector4] when exact precision is required. Note that the values are limited to 32 bits, and unlike [Vector4] this cannot be configured with an engine build option. Use [int] or [PackedInt64Array] if 64-bit values are needed.
public class Vector4i : BuiltinClass {

    public enum Axis : Int32 {
        case AXIS_X = 0
        case AXIS_Y = 1
        case AXIS_Z = 2
        case AXIS_W = 3
    }

    public class var __godot_name: StringName { __godot_name_Vector4i }

    public static let SIZE = 16;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class() {
        // Init constructors before assigning __godot_name
        Vector4i._constructor_0 =  Vector4i.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR4I, 0)
        assert(Vector4i._constructor_0 != nil)
        Vector4i._constructor_1 =  Vector4i.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR4I, 1)
        assert(Vector4i._constructor_1 != nil)
        Vector4i._constructor_2 =  Vector4i.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR4I, 2)
        assert(Vector4i._constructor_2 != nil)
        Vector4i._constructor_3 =  Vector4i.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR4I, 3)
        assert(Vector4i._constructor_3 != nil)
        Vector4i._destructor =  Vector4i.interface.pointee.variant_get_ptr_destructor(GDEXTENSION_VARIANT_TYPE_VECTOR4I)
        assert(Vector4i._destructor != nil)

        // At this point constructors must be assigned
        __godot_name_Vector4i = StringName(from: "Vector4i")
    }

    /// Constructs a default-initialized [Vector4i] with all components set to [code]0[/code].
    public init() {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Vector4i] as a copy of the given [Vector4i].
    public init(from: Vector4i) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a new [Vector4i] from the given [Vector4].
    public init(from: Vector4) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Returns a [Vector4i] with the given components.
    public init(x: Int64, y: Int64, z: Int64, w: Int64) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        withUnsafePointer(to: w) { w_native in
        withUnsafePointer(to: z) { z_native in
        withUnsafePointer(to: y) { y_native in
        withUnsafePointer(to: x) { x_native in
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 4)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(x_native), .init(y_native), .init(z_native), .init(w_native)
            ])
            // call here
            Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
        }
        }
        }
        }
    }
    public required init(from unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(from unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}