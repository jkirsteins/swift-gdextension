/// autogenerated

import godot_native

fileprivate var __godot_name_Transform3D: StringName! = nil

/// 3D transformation (3×4 matrix).
/// 
/// 3×4 matrix (3 rows, 4 columns) used for 3D linear transformations. It can represent transformations such as translation, rotation, or scaling. It consists of a [member basis] (first 3 columns) and a [Vector3] for the [member origin] (last column).
///  
/// For more information, read the "Matrices and transforms" documentation article.
public class Transform3D : BuiltinClass {

    public static var interface: UnsafePointer<GDExtensionInterface>! = nil
    public static var library: GDExtensionClassLibraryPtr! = nil
    
    var interface: UnsafePointer<GDExtensionInterface> { Self.interface }

    

    public class var __godot_name: StringName { __godot_name_Transform3D }

    public static let SIZE = 96;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _constructor_4: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class(_ ginit: GodotInitializer, _: GDExtensionInitializationLevel) {
        Self.interface = ginit.p_interface
        Self.library = ginit.p_library

        // Init constructors before assigning __godot_name
        Transform3D._constructor_0 =  Transform3D.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 0)
        assert(Transform3D._constructor_0 != nil)
        Transform3D._constructor_1 =  Transform3D.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 1)
        assert(Transform3D._constructor_1 != nil)
        Transform3D._constructor_2 =  Transform3D.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 2)
        assert(Transform3D._constructor_2 != nil)
        Transform3D._constructor_3 =  Transform3D.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 3)
        assert(Transform3D._constructor_3 != nil)
        Transform3D._constructor_4 =  Transform3D.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_TRANSFORM3D, 4)
        assert(Transform3D._constructor_4 != nil)
    }

    public class func initialize_godot_name() {
        // At this point constructors for String and StringName
        // must be assigned
        __godot_name_Transform3D = StringName(from: "Transform3D")
    }

    /// Constructs a default-initialized [Transform3D] set to [constant IDENTITY].
    public init() {
        self.opaque = .allocate(byteCount: 96, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Transform3D] as a copy of the given [Transform3D].
    public init(from: Transform3D) {
        self.opaque = .allocate(byteCount: 96, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a Transform3D from a [Basis] and [Vector3].
    public init(basis: Basis, origin: Vector3) {
        self.opaque = .allocate(byteCount: 96, alignment: 4)
        let origin_native = origin._native_ptr()
        let basis_native = basis._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(basis_native), .init(origin_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a Transform3D from a [Projection] by trimming the last row of the projection matrix ([code]from.x.w[/code], [code]from.y.w[/code], [code]from.z.w[/code], and [code]from.w.w[/code] are not copied over).
    public init(x_axis: Vector3, y_axis: Vector3, z_axis: Vector3, origin: Vector3) {
        self.opaque = .allocate(byteCount: 96, alignment: 4)
        let origin_native = origin._native_ptr()
        let z_axis_native = z_axis._native_ptr()
        let y_axis_native = y_axis._native_ptr()
        let x_axis_native = x_axis._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 4)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(x_axis_native), .init(y_axis_native), .init(z_axis_native), .init(origin_native)
            ])
            // call here
            Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a Transform3D from four [Vector3] values (matrix columns). Each axis corresponds to local basis vectors (some of which may be scaled).
    public init(from: Projection) {
        self.opaque = .allocate(byteCount: 96, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_4!(self._native_ptr(), .init(args.baseAddress!))
    }
    public required init(godot unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(godot unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}