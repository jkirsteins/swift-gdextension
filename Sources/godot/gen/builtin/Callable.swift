/// autogenerated

import godot_native

fileprivate var __godot_name_Callable: StringName! = nil

/// Built-in type representing a method in an object instance or a standalone function.
/// 
/// [Callable] is a built-in [Variant] type that represents a function. It can either be a method within an [Object] instance, or a standalone function not related to any object, like a lambda function. Like all [Variant] types, it can be stored in variables and passed to other functions. It is most commonly used for signal callbacks.
///  
/// [b]Example:[/b]
///  
/// [codeblocks]
///  
/// [gdscript]
///  
/// func print_args(arg1, arg2, arg3 = ""):
///  
///     prints(arg1, arg2, arg3)
///  
///  
/// func test():
///  
///     var callable = Callable(self, "print_args")
///  
///     callable.call("hello", "world")  # Prints "hello world ".
///  
///     callable.call(Vector2.UP, 42, callable)  # Prints "(0, -1) 42 Node(node.gd)::print_args".
///  
///     callable.call("invalid")  # Invalid call, should have at least 2 arguments.
///  
/// [/gdscript]
///  
/// [csharp]
///  
/// // Default parameter values are not supported.
///  
/// public void PrintArgs(Variant arg1, Variant arg2, Variant arg3 = default)
///  
/// {
///  
///     GD.PrintS(arg1, arg2, arg3);
///  
/// }
///  
///  
/// public void Test()
///  
/// {
///  
///     // Invalid calls fail silently.
///  
///     Callable callable = new Callable(this, MethodName.PrintArgs);
///  
///     callable.Call("hello", "world"); // Default parameter values are not supported, should have 3 arguments.
///  
///     callable.Call(Vector2.Up, 42, callable); // Prints "(0, -1) 42 Node(Node.cs)::PrintArgs".
///  
///     callable.Call("invalid"); // Invalid call, should have 3 arguments.
///  
/// }
///  
/// [/csharp]
///  
/// [/codeblocks]
///  
/// In GDScript, it's possible to create lambda functions within a method. Lambda functions are custom callables that are not associated with an [Object] instance. Optionally, lambda functions can also be named. The name will be displayed in the debugger, or when calling [method get_method].
///  
/// [codeblock]
///  
/// func _init():
///  
///     var my_lambda = func (message):
///  
///         print(message)
///  
///  
///     # Prints Hello everyone!
///  
///     my_lambda.call("Hello everyone!")
///  
///  
///     # Prints "Attack!", when the button_pressed signal is emitted.
///  
///     button_pressed.connect(func(): print("Attack!"))
///  
/// [/codeblock]
public class Callable : BuiltinClass {

    public static var interface: UnsafePointer<GDExtensionInterface>! = nil
    public static var library: GDExtensionClassLibraryPtr! = nil
    
    var interface: UnsafePointer<GDExtensionInterface> { Self.interface }

    

    public class var __godot_name: StringName { __godot_name_Callable }

    public static let SIZE = 16;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class(_ ginit: GodotInitializer, _: GDExtensionInitializationLevel) {
        Self.interface = ginit.p_interface
        Self.library = ginit.p_library

        // Init constructors before assigning __godot_name
        Callable._constructor_0 =  Callable.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_CALLABLE, 0)
        assert(Callable._constructor_0 != nil)
        Callable._constructor_1 =  Callable.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_CALLABLE, 1)
        assert(Callable._constructor_1 != nil)
        Callable._constructor_2 =  Callable.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_CALLABLE, 2)
        assert(Callable._constructor_2 != nil)
        Callable._destructor =  Callable.interface.pointee.variant_get_ptr_destructor(GDEXTENSION_VARIANT_TYPE_CALLABLE)
        assert(Callable._destructor != nil)
    }

    public class func initialize_godot_name() {
        // At this point constructors for String and StringName
        // must be assigned
        __godot_name_Callable = StringName(from: "Callable")
    }

    /// Constructs an empty [Callable], with no object nor method bound.
    public init() {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Callable] as a copy of the given [Callable].
    public init(from: Callable) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Creates a new [Callable] for the method named [param method] in the specified [param object].
    public init(object: Object, method: StringName) {
        self.opaque = .allocate(byteCount: 16, alignment: 4)
        let method_native = method._native_ptr()
        let object_native = object._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(object_native), .init(method_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    public required init(godot unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(godot unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}