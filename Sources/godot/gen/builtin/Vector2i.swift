/// autogenerated

import godot_native

fileprivate var __godot_name_Vector2i: StringName! = nil

/// Vector used for 2D math using integer coordinates.
/// 
/// 2-element structure that can be used to represent positions in 2D space or any other pair of numeric values.
///  
/// It uses integer coordinates and is therefore preferable to [Vector2] when exact precision is required. Note that the values are limited to 32 bits, and unlike [Vector2] this cannot be configured with an engine build option. Use [int] or [PackedInt64Array] if 64-bit values are needed.
///  
/// [b]Note:[/b] In a boolean context, a Vector2i will evaluate to [code]false[/code] if it's equal to [code]Vector2i(0, 0)[/code]. Otherwise, a Vector2i will always evaluate to [code]true[/code].
public class Vector2i : BuiltinClass {
    public class var __godot_name: StringName { __godot_name_Vector2i }

    public static let SIZE = 8;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class() {
        // Init constructors before assigning __godot_name
        Vector2i._constructor_0 =  Vector2i.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR2I, 0)
        assert(Vector2i._constructor_0 != nil)
        Vector2i._constructor_1 =  Vector2i.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR2I, 1)
        assert(Vector2i._constructor_1 != nil)
        Vector2i._constructor_2 =  Vector2i.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR2I, 2)
        assert(Vector2i._constructor_2 != nil)
        Vector2i._constructor_3 =  Vector2i.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR2I, 3)
        assert(Vector2i._constructor_3 != nil)
        Vector2i._destructor =  Vector2i.interface.pointee.variant_get_ptr_destructor(GDEXTENSION_VARIANT_TYPE_VECTOR2I)
        assert(Vector2i._destructor != nil)

        // At this point constructors must be assigned
        __godot_name_Vector2i = StringName(from: "Vector2i")
    }

    /// Constructs a default-initialized [Vector2i] with all components set to [code]0[/code].
    public init() {
        self.opaque = .allocate(byteCount: Self.SIZE, alignment: 4)
        
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
        defer { args.deallocate() }
        _ = args.initialize(from: [
            
        ])
        Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Vector2i] as a copy of the given [Vector2i].
    public init(from: Vector2i) {
        self.opaque = .allocate(byteCount: Self.SIZE, alignment: 4)
        
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
        defer { args.deallocate() }
        _ = args.initialize(from: [
            .init(from._native_ptr())
        ])
        Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a new [Vector2i] from [Vector2]. The floating point coordinates will be truncated.
    public init(from: Vector2) {
        self.opaque = .allocate(byteCount: Self.SIZE, alignment: 4)
        
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
        defer { args.deallocate() }
        _ = args.initialize(from: [
            .init(from._native_ptr())
        ])
        Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a new [Vector2i] from the given [param x] and [param y].
    public init(x: Int64, y: Int64) {
        self.opaque = .allocate(byteCount: Self.SIZE, alignment: 4)
        
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
        defer { args.deallocate() }
        _ = args.initialize(from: [
            .init(x._native_ptr()), .init(y._native_ptr())
        ])
        Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
    }
        init(from unsafe: UnsafeRawPointer) {
            self.opaque = .init(mutating: unsafe)
        }
        
        init(from unsafe: UnsafeMutableRawPointer) {
            self.opaque = unsafe
        }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}