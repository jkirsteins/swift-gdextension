/// autogenerated

import godot_native

fileprivate var __godot_name_StringName: StringName! = nil

/// An optimized string type for unique names.
/// 
/// [StringName]s are immutable strings designed for general-purpose representation of unique names (also called "string interning"). [StringName] ensures that only one instance of a given name exists (so two [StringName]s with the same value are the same object). Comparing them is much faster than with regular [String]s, because only the pointers are compared, not the whole strings.
///  
/// You will usually just pass a [String] to methods expecting a [StringName] and it will be automatically converted, but you may occasionally want to construct a [StringName] ahead of time with [StringName] or, in GDScript, the literal syntax [code]&"example"[/code].
///  
/// See also [NodePath], which is a similar concept specifically designed to store pre-parsed node paths.
///  
/// Some string methods have corresponding variations. Variations suffixed with [code]n[/code] ([method countn], [method findn], [method replacen], etc.) are [b]case-insensitive[/b] (they make no distinction between uppercase and lowercase letters). Method variations prefixed with [code]r[/code] ([method rfind], [method rsplit], etc.) are reversed, and start from the end of the string, instead of the beginning.
///  
/// [b]Note:[/b] In a boolean context, a [StringName] will evaluate to [code]false[/code] if it is empty ([code]StringName("")[/code]). Otherwise, a [StringName] will always evaluate to [code]true[/code].
public class StringName : BuiltinClass {
    public class var __godot_name: StringName { __godot_name_StringName }

    public static let SIZE = 8;

    public let opaque: UnsafeMutableRawPointer = .allocate(byteCount: SIZE, alignment: 4)

    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class() {
        // Init constructors before assigning __godot_name
        StringName._constructor_0 =  StringName.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_STRING_NAME, 0)
        assert(StringName._constructor_0 != nil)
        StringName._constructor_1 =  StringName.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_STRING_NAME, 1)
        assert(StringName._constructor_1 != nil)
        StringName._constructor_2 =  StringName.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_STRING_NAME, 2)
        assert(StringName._constructor_2 != nil)
        StringName._destructor =  StringName.interface.pointee.variant_get_ptr_destructor(GDEXTENSION_VARIANT_TYPE_STRING_NAME)
        assert(StringName._destructor != nil)

        // At this point constructors must be assigned
        __godot_name_StringName = StringName(from: "StringName")
    }

    /// Constructs an empty [StringName].
    public init() {
        
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
        defer { args.deallocate() }
        _ = args.initialize(from: [
            
        ])
        Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [StringName] as a copy of the given [StringName].
    public init(from: StringName) {
        
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
        defer { args.deallocate() }
        _ = args.initialize(from: [
            .init(from._native_ptr())
        ])
        Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Creates a new [StringName] from the given [String]. In GDScript, [code]StringName("example")[/code] is equivalent to [code]&"example"[/code].
    public init(from: String) {
        let from_nativeStr = from._create_native__kept()
        defer { from_nativeStr.deallocate() }
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
        defer { args.deallocate() }
        _ = args.initialize(from: [
            from_nativeStr
        ])
        Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}