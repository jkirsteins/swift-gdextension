/// autogenerated

import godot_native

fileprivate var __godot_name_Vector4: StringName! = nil

/// Vector used for 4D math using floating point coordinates.
/// 
/// 4-element structure that can be used to represent any quadruplet of numeric values.
///  
/// It uses floating-point coordinates. By default, these floating-point values use 32-bit precision, unlike [float] which is always 64-bit. If double precision is needed, compile the engine with the option [code]precision=double[/code].
///  
/// See [Vector4i] for its integer counterpart.
///  
/// [b]Note:[/b] In a boolean context, a Vector4 will evaluate to [code]false[/code] if it's equal to [code]Vector4(0, 0, 0, 0)[/code]. Otherwise, a Vector4 will always evaluate to [code]true[/code].
public class Vector4 : BuiltinClass {

    public static var interface: UnsafePointer<GDExtensionInterface>! = nil
    public static var library: GDExtensionClassLibraryPtr! = nil
    
    var interface: UnsafePointer<GDExtensionInterface> { Self.interface }

    public enum Axis : Int32 {
        case AXIS_X = 0
        case AXIS_Y = 1
        case AXIS_Z = 2
        case AXIS_W = 3
    }

    public class var __godot_name: StringName { __godot_name_Vector4 }

    public static let SIZE = 32;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class(_ ginit: GodotInitializer, _: GDExtensionInitializationLevel) {
        Self.interface = ginit.p_interface
        Self.library = ginit.p_library

        // Init constructors before assigning __godot_name
        Vector4._constructor_0 =  Vector4.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR4, 0)
        assert(Vector4._constructor_0 != nil)
        Vector4._constructor_1 =  Vector4.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR4, 1)
        assert(Vector4._constructor_1 != nil)
        Vector4._constructor_2 =  Vector4.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR4, 2)
        assert(Vector4._constructor_2 != nil)
        Vector4._constructor_3 =  Vector4.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_VECTOR4, 3)
        assert(Vector4._constructor_3 != nil)
    }

    public class func initialize_godot_name() {
        // At this point constructors for String and StringName
        // must be assigned
        __godot_name_Vector4 = StringName(from: "Vector4")
    }

    /// Constructs a default-initialized [Vector4] with all components set to [code]0[/code].
    public init() {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Vector4] as a copy of the given [Vector4].
    public init(from: Vector4) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a new [Vector4] from the given [Vector4i].
    public init(from: Vector4i) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Returns a [Vector4] with the given components.
    public init(x: Float64, y: Float64, z: Float64, w: Float64) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        withUnsafePointer(to: w) { w_native in
        withUnsafePointer(to: z) { z_native in
        withUnsafePointer(to: y) { y_native in
        withUnsafePointer(to: x) { x_native in
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 4)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(x_native), .init(y_native), .init(z_native), .init(w_native)
            ])
            // call here
            Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
        }
        }
        }
        }
    }
    public required init(godot unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(godot unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}