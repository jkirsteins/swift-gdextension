/// autogenerated

import godot_native

fileprivate var __godot_name_AABB: StringName! = nil

/// Axis-Aligned Bounding Box.
/// 
/// [AABB] consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.
///  
/// It uses floating-point coordinates. The 2D counterpart to [AABB] is [Rect2].
///  
/// Negative values for [member size] are not supported and will not work for most methods. Use [method abs] to get an AABB with a positive size.
///  
/// [b]Note:[/b] Unlike [Rect2], [AABB] does not have a variant that uses integer coordinates.
public class AABB : BuiltinClass {

    public static var interface: UnsafePointer<GDExtensionInterface>! = nil
    public static var library: GDExtensionClassLibraryPtr! = nil
    
    var interface: UnsafePointer<GDExtensionInterface> { Self.interface }

    

    public class var __godot_name: StringName { __godot_name_AABB }

    public static let SIZE = 48;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class(_ ginit: GodotInitializer, _: GDExtensionInitializationLevel) {
        Self.interface = ginit.p_interface
        Self.library = ginit.p_library

        // Init constructors before assigning __godot_name
        AABB._constructor_0 =  AABB.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_AABB, 0)
        assert(AABB._constructor_0 != nil)
        AABB._constructor_1 =  AABB.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_AABB, 1)
        assert(AABB._constructor_1 != nil)
        AABB._constructor_2 =  AABB.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_AABB, 2)
        assert(AABB._constructor_2 != nil)
    }

    public class func initialize_godot_name() {
        // At this point constructors for String and StringName
        // must be assigned
        __godot_name_AABB = StringName(from: "AABB")
    }

    /// Constructs a default-initialized [AABB] with default (zero) values of [member position] and [member size].
    public init() {
        self.opaque = .allocate(byteCount: 48, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs an [AABB] as a copy of the given [AABB].
    public init(from: AABB) {
        self.opaque = .allocate(byteCount: 48, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs an [AABB] from a position and size.
    public init(position: Vector3, size: Vector3) {
        self.opaque = .allocate(byteCount: 48, alignment: 4)
        let size_native = size._native_ptr()
        let position_native = position._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(position_native), .init(size_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    public required init(godot unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(godot unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}