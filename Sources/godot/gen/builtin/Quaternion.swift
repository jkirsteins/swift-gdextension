/// autogenerated

import godot_native

fileprivate var __godot_name_Quaternion: StringName! = nil

/// Quaternion.
/// 
/// A unit quaternion used for representing 3D rotations. Quaternions need to be normalized to be used for rotation.
///  
/// It is similar to Basis, which implements matrix representation of rotations, and can be parametrized using both an axis-angle pair or Euler angles. Basis stores rotation, scale, and shearing, while Quaternion only stores rotation.
///  
/// Due to its compactness and the way it is stored in memory, certain operations (obtaining axis-angle and performing SLERP, in particular) are more efficient and robust against floating-point errors.
public class Quaternion : BuiltinClass {

    public static var interface: UnsafePointer<GDExtensionInterface>! = nil
    public static var library: GDExtensionClassLibraryPtr! = nil
    
    var interface: UnsafePointer<GDExtensionInterface> { Self.interface }

    

    public class var __godot_name: StringName { __godot_name_Quaternion }

    public static let SIZE = 32;

    public let opaque: UnsafeMutableRawPointer
    
    static var _constructor_0: GDExtensionPtrConstructor? = nil
    static var _constructor_1: GDExtensionPtrConstructor? = nil
    static var _constructor_2: GDExtensionPtrConstructor? = nil
    static var _constructor_3: GDExtensionPtrConstructor? = nil
    static var _constructor_4: GDExtensionPtrConstructor? = nil
    static var _constructor_5: GDExtensionPtrConstructor? = nil
    static var _destructor: GDExtensionPtrDestructor? = nil

    public class func initialize_class(_ ginit: GodotInitializer, _: GDExtensionInitializationLevel) {
        Self.interface = ginit.p_interface
        Self.library = ginit.p_library

        // Init constructors before assigning __godot_name
        Quaternion._constructor_0 =  Quaternion.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_QUATERNION, 0)
        assert(Quaternion._constructor_0 != nil)
        Quaternion._constructor_1 =  Quaternion.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_QUATERNION, 1)
        assert(Quaternion._constructor_1 != nil)
        Quaternion._constructor_2 =  Quaternion.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_QUATERNION, 2)
        assert(Quaternion._constructor_2 != nil)
        Quaternion._constructor_3 =  Quaternion.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_QUATERNION, 3)
        assert(Quaternion._constructor_3 != nil)
        Quaternion._constructor_4 =  Quaternion.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_QUATERNION, 4)
        assert(Quaternion._constructor_4 != nil)
        Quaternion._constructor_5 =  Quaternion.interface.pointee.variant_get_ptr_constructor(GDEXTENSION_VARIANT_TYPE_QUATERNION, 5)
        assert(Quaternion._constructor_5 != nil)
    }

    public class func initialize_godot_name() {
        // At this point constructors for String and StringName
        // must be assigned
        __godot_name_Quaternion = StringName(from: "Quaternion")
    }

    /// Constructs a default-initialized quaternion with all components set to [code]0[/code].
    public init() {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 0)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                
            ])
            // call here
            Self._constructor_0!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a [Quaternion] as a copy of the given [Quaternion].
    public init(from: Quaternion) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_1!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// /// Godot documentation missing
    public init(from: Basis) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let from_native = from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 1)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(from_native)
            ])
            // call here
            Self._constructor_2!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a quaternion that will rotate around the given axis by the specified angle. The axis must be a normalized vector.
    public init(axis: Vector3, angle: Float64) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        withUnsafePointer(to: angle) { angle_native in
        let axis_native = axis._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(axis_native), .init(angle_native)
            ])
            // call here
            Self._constructor_3!(self._native_ptr(), .init(args.baseAddress!))
        }
    }
    /// Constructs a quaternion from the given [Basis].
    public init(arc_from: Vector3, arc_to: Vector3) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        let arc_to_native = arc_to._native_ptr()
        let arc_from_native = arc_from._native_ptr()
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 2)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(arc_from_native), .init(arc_to_native)
            ])
            // call here
            Self._constructor_4!(self._native_ptr(), .init(args.baseAddress!))
    }
    /// Constructs a quaternion defined by the given values.
    public init(x: Float64, y: Float64, z: Float64, w: Float64) {
        self.opaque = .allocate(byteCount: 32, alignment: 4)
        withUnsafePointer(to: w) { w_native in
        withUnsafePointer(to: z) { z_native in
        withUnsafePointer(to: y) { y_native in
        withUnsafePointer(to: x) { x_native in
        let args: UnsafeMutableBufferPointer<GDExtensionConstTypePtr?> = .allocate(capacity: 4)
            defer { args.deallocate() }
            _ = args.initialize(from: [
                .init(x_native), .init(y_native), .init(z_native), .init(w_native)
            ])
            // call here
            Self._constructor_5!(self._native_ptr(), .init(args.baseAddress!))
        }
        }
        }
        }
    }
    public required init(godot unsafe: UnsafeRawPointer) {
        self.opaque = .init(mutating: unsafe)
    }
    public required init(godot unsafe: UnsafeMutableRawPointer) {
        self.opaque = unsafe
    }

    deinit {
        Self._destructor?(self._native_ptr())
        opaque.deallocate()
    }
}