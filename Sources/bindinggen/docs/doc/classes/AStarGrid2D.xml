<?xml version="1.0" encoding="UTF-8" ?>
<class name="AStarGrid2D" inherits="RefCounted" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_compute_cost" qualifiers="virtual const">
			<return type="float" />
			<param index="0" name="from_id" type="Vector2i" />
			<param index="1" name="to_id" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="_estimate_cost" qualifiers="virtual const">
			<return type="float" />
			<param index="0" name="from_id" type="Vector2i" />
			<param index="1" name="to_id" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
			</description>
		</method>
		<method name="get_id_path">
			<return type="Vector2i[]" />
			<param index="0" name="from_id" type="Vector2i" />
			<param index="1" name="to_id" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="get_point_path">
			<return type="PackedVector2Array" />
			<param index="0" name="from_id" type="Vector2i" />
			<param index="1" name="to_id" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="get_point_position" qualifiers="const">
			<return type="Vector2" />
			<param index="0" name="id" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="get_point_weight_scale" qualifiers="const">
			<return type="float" />
			<param index="0" name="id" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="is_dirty" qualifiers="const">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="is_in_bounds" qualifiers="const">
			<return type="bool" />
			<param index="0" name="x" type="int" />
			<param index="1" name="y" type="int" />
			<description>
			</description>
		</method>
		<method name="is_in_boundsv" qualifiers="const">
			<return type="bool" />
			<param index="0" name="id" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="is_point_solid" qualifiers="const">
			<return type="bool" />
			<param index="0" name="id" type="Vector2i" />
			<description>
			</description>
		</method>
		<method name="set_point_solid">
			<return type="void" />
			<param index="0" name="id" type="Vector2i" />
			<param index="1" name="solid" type="bool" default="true" />
			<description>
			</description>
		</method>
		<method name="set_point_weight_scale">
			<return type="void" />
			<param index="0" name="id" type="Vector2i" />
			<param index="1" name="weight_scale" type="float" />
			<description>
			</description>
		</method>
		<method name="update">
			<return type="void" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="cell_size" type="Vector2" setter="set_cell_size" getter="get_cell_size" default="Vector2(1, 1)">
		</member>
		<member name="default_compute_heuristic" type="int" setter="set_default_compute_heuristic" getter="get_default_compute_heuristic" enum="AStarGrid2D.Heuristic" default="0">
		</member>
		<member name="default_estimate_heuristic" type="int" setter="set_default_estimate_heuristic" getter="get_default_estimate_heuristic" enum="AStarGrid2D.Heuristic" default="0">
		</member>
		<member name="diagonal_mode" type="int" setter="set_diagonal_mode" getter="get_diagonal_mode" enum="AStarGrid2D.DiagonalMode" default="0">
		</member>
		<member name="jumping_enabled" type="bool" setter="set_jumping_enabled" getter="is_jumping_enabled" default="false">
		</member>
		<member name="offset" type="Vector2" setter="set_offset" getter="get_offset" default="Vector2(0, 0)">
		</member>
		<member name="size" type="Vector2i" setter="set_size" getter="get_size" default="Vector2i(0, 0)">
		</member>
	</members>
	<constants>
		<constant name="HEURISTIC_EUCLIDEAN" value="0" enum="Heuristic">
		</constant>
		<constant name="HEURISTIC_MANHATTAN" value="1" enum="Heuristic">
		</constant>
		<constant name="HEURISTIC_OCTILE" value="2" enum="Heuristic">
		</constant>
		<constant name="HEURISTIC_CHEBYSHEV" value="3" enum="Heuristic">
		</constant>
		<constant name="HEURISTIC_MAX" value="4" enum="Heuristic">
		</constant>
		<constant name="DIAGONAL_MODE_ALWAYS" value="0" enum="DiagonalMode">
		</constant>
		<constant name="DIAGONAL_MODE_NEVER" value="1" enum="DiagonalMode">
		</constant>
		<constant name="DIAGONAL_MODE_AT_LEAST_ONE_WALKABLE" value="2" enum="DiagonalMode">
		</constant>
		<constant name="DIAGONAL_MODE_ONLY_IF_NO_OBSTACLES" value="3" enum="DiagonalMode">
		</constant>
		<constant name="DIAGONAL_MODE_MAX" value="4" enum="DiagonalMode">
		</constant>
	</constants>
</class>
