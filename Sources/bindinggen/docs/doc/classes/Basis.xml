<?xml version="1.0" encoding="UTF-8" ?>
<class name="Basis" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
	</brief_description>
	<description>
	</description>
	<tutorials>
	</tutorials>
	<constructors>
		<constructor name="Basis">
			<return type="Basis" />
			<description>
			</description>
		</constructor>
		<constructor name="Basis">
			<return type="Basis" />
			<param index="0" name="from" type="Basis" />
			<description>
			</description>
		</constructor>
		<constructor name="Basis">
			<return type="Basis" />
			<param index="0" name="axis" type="Vector3" />
			<param index="1" name="angle" type="float" />
			<description>
			</description>
		</constructor>
		<constructor name="Basis">
			<return type="Basis" />
			<param index="0" name="from" type="Quaternion" />
			<description>
			</description>
		</constructor>
		<constructor name="Basis">
			<return type="Basis" />
			<param index="0" name="x_axis" type="Vector3" />
			<param index="1" name="y_axis" type="Vector3" />
			<param index="2" name="z_axis" type="Vector3" />
			<description>
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="determinant" qualifiers="const">
			<return type="float" />
			<description>
			</description>
		</method>
		<method name="from_euler" qualifiers="static">
			<return type="Basis" />
			<param index="0" name="euler" type="Vector3" />
			<param index="1" name="order" type="int" default="2" />
			<description>
			</description>
		</method>
		<method name="from_scale" qualifiers="static">
			<return type="Basis" />
			<param index="0" name="scale" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="get_euler" qualifiers="const">
			<return type="Vector3" />
			<param index="0" name="order" type="int" default="2" />
			<description>
			</description>
		</method>
		<method name="get_rotation_quaternion" qualifiers="const">
			<return type="Quaternion" />
			<description>
			</description>
		</method>
		<method name="get_scale" qualifiers="const">
			<return type="Vector3" />
			<description>
			</description>
		</method>
		<method name="inverse" qualifiers="const">
			<return type="Basis" />
			<description>
			</description>
		</method>
		<method name="is_equal_approx" qualifiers="const">
			<return type="bool" />
			<param index="0" name="b" type="Basis" />
			<description>
			</description>
		</method>
		<method name="is_finite" qualifiers="const">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="looking_at" qualifiers="static">
			<return type="Basis" />
			<param index="0" name="target" type="Vector3" />
			<param index="1" name="up" type="Vector3" default="Vector3(0, 1, 0)" />
			<description>
			</description>
		</method>
		<method name="orthonormalized" qualifiers="const">
			<return type="Basis" />
			<description>
			</description>
		</method>
		<method name="rotated" qualifiers="const">
			<return type="Basis" />
			<param index="0" name="axis" type="Vector3" />
			<param index="1" name="angle" type="float" />
			<description>
			</description>
		</method>
		<method name="scaled" qualifiers="const">
			<return type="Basis" />
			<param index="0" name="scale" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="slerp" qualifiers="const">
			<return type="Basis" />
			<param index="0" name="to" type="Basis" />
			<param index="1" name="weight" type="float" />
			<description>
			</description>
		</method>
		<method name="tdotx" qualifiers="const">
			<return type="float" />
			<param index="0" name="with" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="tdoty" qualifiers="const">
			<return type="float" />
			<param index="0" name="with" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="tdotz" qualifiers="const">
			<return type="float" />
			<param index="0" name="with" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="transposed" qualifiers="const">
			<return type="Basis" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="Vector3" setter="" getter="" default="Vector3(1, 0, 0)">
		</member>
		<member name="y" type="Vector3" setter="" getter="" default="Vector3(0, 1, 0)">
		</member>
		<member name="z" type="Vector3" setter="" getter="" default="Vector3(0, 0, 1)">
		</member>
	</members>
	<constants>
		<constant name="IDENTITY" value="Basis(1, 0, 0, 0, 1, 0, 0, 0, 1)">
		</constant>
		<constant name="FLIP_X" value="Basis(-1, 0, 0, 0, 1, 0, 0, 0, 1)">
		</constant>
		<constant name="FLIP_Y" value="Basis(1, 0, 0, 0, -1, 0, 0, 0, 1)">
		</constant>
		<constant name="FLIP_Z" value="Basis(1, 0, 0, 0, 1, 0, 0, 0, -1)">
		</constant>
	</constants>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<param index="0" name="right" type="Basis" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Basis" />
			<param index="0" name="right" type="Basis" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Vector3" />
			<param index="0" name="right" type="Vector3" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Basis" />
			<param index="0" name="right" type="float" />
			<description>
			</description>
		</operator>
		<operator name="operator *">
			<return type="Basis" />
			<param index="0" name="right" type="int" />
			<description>
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<param index="0" name="right" type="Basis" />
			<description>
			</description>
		</operator>
		<operator name="operator []">
			<return type="Vector3" />
			<param index="0" name="index" type="int" />
			<description>
			</description>
		</operator>
	</operators>
</class>
